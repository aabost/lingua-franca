/** 
 * Test a form of a distributed deterministic system
 * where a federate that receives timestamped messages has a timer in addition to the messages
 * as triggers. Therefore, careful coordination of the advancement of time using Ptides is needed.
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
    timeout: 5 sec,
    coordination: decentralized
};

import Count from "lib/Count.lf";

reactor Print {
    input in:int;
    state success:int(0);
    state success_tardy:int(0);
    timer t(0, 100 usec); // Force a timer to be invoke periodically
                         // to ensure logical time will advance in the
                         // absence of incoming messages.
    state c:int(0);
    reaction(in) {=
        interval_t current_time = get_elapsed_logical_time();
        printf("At time %llu received %d. Tardiness is %llu.\n", get_elapsed_logical_time(), in->value, in->tardiness);
        if (current_time == SEC(1) *  self->c) {
            self->success++; // Message was on-time
        }
        self->c++;
    =} tardy {=
        if (in->tardiness == 0) {
            // A microstep tardiness has occurred            
        	printf("At time %llu received %d. A microstep tardiness has occurred.\n", get_elapsed_logical_time(), in->value);
        } else {
        	printf("At time %llu received %d. Message is tardy by %llu nsec.\n", get_elapsed_logical_time(), in->value, in->tardiness);        
        }
        self->success_tardy++;
        self->c++;
    =}
    reaction(t) {=
        // Do nothing.
    =}
    
    reaction(shutdown) {=
        if ((self->success +  self->success_tardy) != 6) { // At timeout (e.g., t = 5000000000), we allow
                                                           // for arbitrary microsteps. Therefore, we get
                                                           // 6 messages rather than 5.
            fprintf(stderr, "Failed to detect tardiness of messages.\n");
            exit(1);
        } else {
            printf("Successfully detected tardiness (%d tardy, %d on-time).\n", self->success_tardy, self->success);
        }
    =}
}

federated reactor DistributedCount {
    c = new Count();
    p = new Print();
    c.out -> p.in;    // Indicating a 'logical' connection.
}